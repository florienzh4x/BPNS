x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.11.0-python3.12}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-pandas numpy pyarrow minio psycopg2-binary sqlalchemy pyyaml }
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - dev-net
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres_airflow:
      condition: service_healthy

x-trino-common:
  &trino-common
  build:
    context: ./trino
    dockerfile: Dockerfile
    args:
      - TRINO_VERSION=476
      - JARS_DIRECTORY=/usr/lib/trino/plugin/hive
      - HADOOP_AWS_JAR_VERSION=3.3.4
      - MINIO_JAR_VERSION=8.5.17
      - AWS_BUNDLE_JAR_VERSION=1.12.782
  image: trino_ranger
  networks:
    - dev-net
  environment:
    &trino-env
    TRINO_DISCOVERY_URI: http://trino-coordinator:8080

services:
  metastore-postgres:
    image: postgres:17
    container_name: postgres-hive
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hivepassword
    volumes:
      - hive_postgres_data:/var/lib/postgresql/data
    networks:
      - dev-net

  iceberg-metastore-postgres:
    image: postgres:17
    container_name: iceberg-postgres-hive
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: iceberg
      POSTGRES_PASSWORD: icebergpassword
    volumes:
      - iceberg_hive_postgres_data:/var/lib/postgresql/data
    networks:
      - dev-net  

  postgresql_data:
    image: postgres:17
    container_name: postgres-data
    hostname: postgres-data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dvdrental
    ports:
      - "5432:5432"
    volumes:
      - dvdrental-postgresql:/var/lib/postgresql/data
      - ./dvdrental.tar:/dummy/dvdrental.tar
    networks:
      - dev-net

  postgres_airflow:
    image: postgres:17
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - dev-net
  
  redis:
    image: redis:7.2-bookworm
    container_name: airflow-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks:
      - dev-net

  hive-metastore:
    build:
      context: ./hive
      dockerfile: Dockerfile
      args:
        - HIVE_VERSION=4.0.1
        - JARS_DIRECTORY=/opt/hive/lib
        - HADOOP_AWS_JAR_VERSION=3.3.4
        - MINIO_JAR_VERSION=8.5.17
        - AWS_BUNDLE_JAR_VERSION=1.12.782
        - POSTGRESQL_JAR_VERSION=42.7.5
    image: hive-image:4.0.1
    container_name: hive-metastore
    hostname: hive-metastore
    environment:
      SERVICE_NAME: metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hivepassword
      HIVE_METASTORE_DB_HOST: postgres-hive
      HIVE_METASTORE_DB_NAME: metastore
      HIVE_METASTORE_DB_TYPE: postgres
    depends_on:
      - metastore-postgres
    ports:
      - "9083:9083"
    volumes:
      - hive_metastore_data:/opt/hive/data
      - "./hive/hive-site.xml:/opt/hive/conf/core-site.xml"
    networks:
      - dev-net

  iceberg-hive-metastore:
    build:
      context: ./hive
      dockerfile: Dockerfile
      args:
        - HIVE_VERSION=4.0.1
        - JARS_DIRECTORY=/opt/hive/lib
        - HADOOP_AWS_JAR_VERSION=3.3.4
        - MINIO_JAR_VERSION=8.5.17
        - AWS_BUNDLE_JAR_VERSION=1.12.782
        - POSTGRESQL_JAR_VERSION=42.7.5
    image: hive-image:4.0.1
    container_name: iceberg-hive-metastore
    hostname: iceberg-hive-metastore
    environment:
      SERVICE_NAME: metastore
      HIVE_METASTORE_USER: iceberg
      HIVE_METASTORE_PASSWORD: icebergpassword
      HIVE_METASTORE_DB_HOST: iceberg-postgres-hive
      HIVE_METASTORE_DB_NAME: metastore
      HIVE_METASTORE_DB_TYPE: postgres
      DB_DRIVER: postgres
      SCHEMA_COMMAND: -initSchema
      VERBOSE_MODE: true
    depends_on:
      - iceberg-metastore-postgres
    ports:
      - "29083:9083"
    volumes:
      - iceberg_hive_metastore_data:/opt/hive/data
      - "./hive/iceberg-site.xml:/opt/hive/conf/core-site.xml"
    networks:
      - dev-net

  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
      - MINIO_DOMAIN=minio
    volumes:
      - minio_data:/data
    ports:
      - "9001:9001"
      - "9000:9000"
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }                             # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                                        # start Minio in the background
        until isAlive; do sleep 1; done                                                         # wait until Minio is alive
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://minio:9000 admin admin123                                   # setup Minio client
        mc mb myminio/landing-zones/ --ignore-existing                                              # create test bucket
        mc anonymous set public myminio/landing-zones                                               # make the test bucket public
        mc admin accesskey create myminio admin --access-key admin_minio --secret-key admin_minio   # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid                                  # stop Minio
        while isAlive; do sleep 0.1; done                                                       # wait until Minio is stopped
        exec minio $0 "$@"                                                                      # start Minio in the foreground
      '
    command: ["server", "/data", "--console-address", ":9001"]
    networks:
      - dev-net

  trino-coordinator:
    <<: *trino-common
    container_name: trino-coordinator
    ports:
      - "8080:8080"
      - "8443:8443"
    environment:
      TRINO_DISCOVERY_URI: http://trino-coordinator:8080
      TRINO_NODE_ID: coordinator
    volumes:
      - ./trino/coordinator-config:/etc/trino
    command: ["/usr/lib/trino/bin/run-trino"]

  trino-worker-1:
    <<: *trino-common
    container_name: trino-worker-1
    volumes:
      - ./trino/worker-config-1:/etc/trino
    environment:
      <<: *trino-env
      TRINO_NODE_ID: worker1
    command: ["/usr/lib/trino/bin/run-trino"]
    depends_on:
      - trino-coordinator

  dbt:
    build:
      context: ./dbt
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE=slim-bookworm
        - PYTHON_VERSION=3.12
        - PIP_ADDITIONAL_REQUIREMENTS=pyarrow<19.0.0
        - DBT_ADAPTERS=dbt-trino
        - SSH_USER=dbtuser
        - SSH_PASSWORD=dbtpass
        - DBT_PROFILES_DIR=/home/dbtuser/dbt/profiles
        - DBT_TARGET=dev
    image: dbt_image:latest
    container_name: dbt
    hostname: dbt
    environment:
      - PYTHONWARNINGS="ignore:Unverified HTTPS request"
    ports:
      - "2222:22"
    volumes:
      - ./dbt/dbt_data:/home/dbtuser/dbt
    networks:
      - dev-net

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8888:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    container_name: airflow-flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  mysql:
    image: mysql:latest
    container_name: mysql-data
    hostname: mysql-data
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: mysql
      MYSQL_USER: mysql_admin
      MYSQL_PASSWORD: mysql_admin
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql_dummy.sql:/dummy/mysql_dummy.sql
    networks:
      - dev-net

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Hasanal123"
      MSSQL_PID: "Developer"
    volumes:
      - mssql_data:/var/opt/mssql
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Hasanal123", "-Q", "SELECT 1"]
      interval: 10s
      retries: 10
    networks:
      - dev-net

volumes:
  dvdrental-postgresql:
  postgres-airflow:
  minio_data:
  hive_postgres_data:
  hive_metastore_data:
  iceberg_hive_metastore_data:
  iceberg_hive_postgres_data:
  mysql_data:
  mssql_data:
  
networks:
  dev-net:
    driver: bridge